name: .NET Core Desktop

on:
  push:
    branches: [ master ]

jobs:

  build:

    strategy:
      matrix:
        configuration: [KK]

    runs-on: windows-latest  # For a list of available runner types, refer to
                             # https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on

    env:
      Solution_Name: MES.Order.sln                         # Replace with your solution name, i.e. MyWpfApp.sln.
     # Test_Project_Path: your-test-project-path                 # Replace with the path to your test project, i.e. MyWpfApp.Tests\MyWpfApp.Tests.csproj.
     # Wap_Project_Directory: your-wap-project-directory-name    # Replace with the Wap project directory relative to the solution, i.e. MyWpfApp.Package.
    #  Wap_Project_Path: your-wap-project-path                   # Replace with the path to your Wap project, i.e. MyWpf.App.Package\MyWpfApp.Package.wapproj.

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        fetch-depth: 0

    # Install the .NET Core workload
    - name: Install .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.x

    # Add  MSBuild to the PATH: https://github.com/microsoft/setup-msbuild
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.0.2
      with:
       vswhere-path: 'C:\Program Files (x86)\Microsoft Visual Studio\Installer\'
       
  #  - name: Setup MSBuild.exe
   #   uses: warrenbuckley/Setup-MSBuild@v1

    - name: MSBuild
      #working-directory: D:\ths-dev\Git\MES.Order\
      run: msbuild D:\ths-dev\Git\MES.Order\MES.Order.sln 
       
    # Execute all unit tests in the solution
    #- name: Execute unit tests
   #   run: dotnet test

    # Restore the application to populate the obj folder with RuntimeIdentifiers
   # - name: Restore the application
    #  run: msbuild MES.Order.sln  /t:Restore /p:Configuration=$env:Configuration
     # env:
      #  Configuration: ${{ matrix.configuration }}

  
    # Create the app package by building and packaging the Windows Application Packaging project
    #- name: Create the app package
     # run: msbuild $env:Wap_Project_Path /p:Configuration=$env:Configuration /p:UapAppxPackageBuildMode=$env:Appx_Package_Build_Mode /p:AppxBundle=$env:Appx_Bundle /p:PackageCertificateKeyFile=GitHubActionsWorkflow.pfx /p:PackageCertificatePassword=${{ secrets.Pfx_Key }}
      #env:
       # Appx_Bundle: Always
        #Appx_Bundle_Platforms: x86|x64
        #Appx_Package_Build_Mode: StoreUpload
        #Configuration: ${{ matrix.configuration }}

    # Remove the pfx
   # - name: Remove the pfx
   #   run: Remove-Item -path $env:Wap_Project_Directory\$env:Signing_Certificate

    # Upload the MSIX package: https://github.com/marketplace/actions/upload-artifact
  #  - name: Upload build artifacts
  #    uses: actions/upload-artifact@v2
  #    with:
   #     name: MSIX Package
  #      path: ${{ env.Wap_Project_Directory }}\AppPackages
